-- Generated by AI. 

local WindUI = loadstring(game:HttpGet("https://raw.githubusercontent.com/hdbfishwh/weshbound/refs/heads/main/theme.lua"))()

-- Get the player's name properly
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local displayName = LocalPlayer.DisplayName
local userName = LocalPlayer.Name

-- Auto Farm System
local AutoFarm = {
    settings = {
        attackDistance = 5,
        enabled = false,
        autoMobsDoors = false,
        autoSkills = false,
        collectCoins = false,
        autoEscape = false
    },
    running = false
}

-- Main automation function
function AutoFarm:start()
    if self.running then return end
    self.running = true
    
    spawn(function()
        while self.running and self.settings.enabled do
            -- Auto Attack
            if self.settings.enabled then
                self:autoAttack()
            end
            
            -- Auto Mobs & Doors
            if self.settings.autoMobsDoors then
                self:handleMobsDoors()
            end
            
            -- Auto Skills
            if self.settings.autoSkills then
                self:useSkills()
            end
            
            -- Collect Coins
            if self.settings.collectCoins then
                self:collectCoins()
            end
            
            -- Auto Escape
            if self.settings.autoEscape then
                self:checkEscape()
            end
            
            wait(0.5) -- Prevent lag
        end
        self.running = false
    end)
end

function AutoFarm:stop()
    self.running = false
end

function AutoFarm:autoAttack()
    -- Implement your game's attack logic here
    -- Example: find nearest enemy and attack
    print("Auto Attack: Searching for targets...")
end

function AutoFarm:handleMobsDoors()
    -- Implement mobs and doors interaction
    print("Auto Mobs & Doors: Processing...")
end

function AutoFarm:useSkills()
    -- Implement skill usage
    print("Auto Skills: Using skills...")
end

function AutoFarm:collectCoins()
    -- Implement coin collection
    print("Collect Coins: Searching for coins...")
end

function AutoFarm:checkEscape()
    -- Implement escape logic
    print("Auto Escape: Checking health...")
end

WindUI:Localization({
    Enabled = true,
    Prefix = "loc:",
    DefaultLanguage = "en",
    Translations = {
        ["en"] = {
            ["WINDUI_EXAMPLE"] = "Synthorix",
            ["WELCOME"] = "Weshbound Farm",
            ["LIB_DESC"] = "Hello " .. displayName .. " (@" .. userName .. "), thank you for using our script :)",
            ["SETTINGS"] = "Settings",
            ["APPEARANCE"] = "Appearance",
            ["FEATURES"] = "Features",
            ["UTILITIES"] = "Utilities",
            ["UI_ELEMENTS"] = "UI Elements",
            ["CONFIGURATION"] = "Configuration",
            ["SAVE_CONFIG"] = "Save Configuration",
            ["LOAD_CONFIG"] = "Load Configuration",
            ["THEME_SELECT"] = "Select Theme",
            ["TRANSPARENCY"] = "Window Transparency"
        }
    }
})

WindUI.TransparencyValue = 0.2
WindUI:SetTheme("Dark")

local function gradient(text, startColor, endColor)
    local result = ""
    for i = 1, #text do
        local t = (i - 1) / (#text - 1)
        local r = math.floor((startColor.R + (endColor.R - startColor.R) * t) * 255)
        local g = math.floor((startColor.G + (endColor.G - startColor.G) * t) * 255)
        local b = math.floor((startColor.B + (endColor.B - startColor.B) * t) * 255)
        result = result .. string.format('<font color="rgb(%d,%d,%d)">%s</font>', r, g, b, text:sub(i, i))
    end
    return result
end

WindUI:Popup({
    Title = gradient("Dev by Synthorix", Color3.fromHex("#6A11CB"), Color3.fromHex("#2575FC")),
    Icon = "sparkles",
    Content = "loc:LIB_DESC",
    Buttons = {
        {
            Title = "Get Started",
            Icon = "arrow-right",
            Variant = "Primary",
            Callback = function() end
        }
    }
})

local Window = WindUI:CreateWindow({
    Title = "loc:WINDUI_EXAMPLE",
    Icon = "rbxassetid://7724950285",
    Author = "loc:WELCOME",
    Folder = "WindUI_Example",
    Size = UDim2.fromOffset(450, 500), -- Increased size to fit all features
    Theme = "Dark",
    User = {
        Enabled = true,
        Anonymous = false,
        Name = displayName,
        Username = userName,
        Callback = function()
            WindUI:Notify({
                Title = "User Profile",
                Content = "User: " .. displayName .. " (@" .. userName .. ")",
                Duration = 3
            })
        end
    },
    SideBarWidth = 160,
})

Window:CreateTopbarButton("theme-switcher", "moon", function()
    WindUI:SetTheme(WindUI:GetCurrentTheme() == "Dark" and "Light" or "Dark")
    WindUI:Notify({
        Title = "Theme Changed",
        Content = "Current theme: "..WindUI:GetCurrentTheme(),
        Duration = 2
    })
end, 990)

local Tabs = {
    Main = Window:Section({ Title = "loc:FEATURES", Opened = true }),
    Settings = Window:Section({ Title = "loc:SETTINGS", Opened = true }),
    Utilities = Window:Section({ Title = "loc:UTILITIES", Opened = true })
}

local TabHandles = {
    Elements = Tabs.Main:Tab({ Title = "Auto Farm", Icon = "bot", Desc = "Automation Features" }),
    Appearance = Tabs.Settings:Tab({ Title = "loc:APPEARANCE", Icon = "brush" }),
    Config = Tabs.Utilities:Tab({ Title = "loc:CONFIGURATION", Icon = "settings" })
}

TabHandles.Elements:Divider()

-- Main Auto Farm Toggle
local mainToggle = TabHandles.Elements:Toggle({
    Title = "Enable Auto Farm",
    Desc = "Master switch for all automation features",
    Value = false,
    Callback = function(state) 
        AutoFarm.settings.enabled = state
        if state then
            AutoFarm:start()
            WindUI:Notify({
                Title = "Auto Farm",
                Content = "Started automation system",
                Icon = "play",
                Duration = 2
            })
        else
            AutoFarm:stop()
            WindUI:Notify({
                Title = "Auto Farm",
                Content = "Stopped automation system",
                Icon = "stop",
                Duration = 2
            })
        end
    end
})

-- Set Distance - slider limit from 0 to 10
local distanceSlider = TabHandles.Elements:Slider({
    Title = "Attack Distance",
    Desc = "Set the maximum attack distance (0-10)",
    Value = { Min = 0, Max = 10, Default = 5 },
    Callback = function(value)
        AutoFarm.settings.attackDistance = value
        WindUI:Notify({
            Title = "Distance Set",
            Content = "Attack distance: " .. value,
            Duration = 2
        })
    end
})

-- Auto Attack - Switch button
local autoAttackToggle = TabHandles.Elements:Toggle({
    Title = "Auto Attack",
    Desc = "Automatically attack nearby enemies",
    Value = false,
    Callback = function(state) 
        AutoFarm.settings.enabled = state
        WindUI:Notify({
            Title = "Auto Attack",
            Content = state and "Enabled" or "Disabled",
            Icon = state and "sword" or "x",
            Duration = 2
        })
    end
})

-- Auto Mobs & Doors - Switch button
local autoMobsDoorsToggle = TabHandles.Elements:Toggle({
    Title = "Auto Mobs & Doors",
    Desc = "Automatically detect and interact with mobs and doors",
    Value = false,
    Callback = function(state) 
        AutoFarm.settings.autoMobsDoors = state
        WindUI:Notify({
            Title = "Auto Mobs & Doors",
            Content = state and "Enabled" or "Disabled",
            Icon = state and "door-open" or "x",
            Duration = 2
        })
    end
})

-- Auto Skill & Perks - Switch button
local autoSkillToggle = TabHandles.Elements:Toggle({
    Title = "Auto Skill & Perks",
    Desc = "Automatically use skills and perks",
    Value = false,
    Callback = function(state) 
        AutoFarm.settings.autoSkills = state
        WindUI:Notify({
            Title = "Auto Skills",
            Content = state and "Enabled" or "Disabled",
            Icon = state and "zap" or "x",
            Duration = 2
        })
    end
})

-- Collect Coins - Switch button
local collectCoinsToggle = TabHandles.Elements:Toggle({
    Title = "Collect Coins",
    Desc = "Automatically collect nearby coins",
    Value = false,
    Callback = function(state) 
        AutoFarm.settings.collectCoins = state
        WindUI:Notify({
            Title = "Coin Collection",
            Content = state and "Enabled" or "Disabled",
            Icon = state and "coin" or "x",
            Duration = 2
        })
    end
})

-- Auto Escape - Switch button
local autoEscapeToggle = TabHandles.Elements:Toggle({
    Title = "Auto Escape",
    Desc = "Automatically escape when health is low",
    Value = false,
    Callback = function(state) 
        AutoFarm.settings.autoEscape = state
        WindUI:Notify({
            Title = "Auto Escape",
            Content = state and "Enabled" or "Disabled",
            Icon = state and "shield" or "x",
            Duration = 2
        })
    end
})

TabHandles.Elements:Divider()

-- Status display
TabHandles.Elements:Paragraph({
    Title = "Farm Status",
    Desc = "Ready to automate your gameplay",
    Image = "activity",
    ImageSize = 20,
    Color = "Green"
})

-- Test button to check if features work
TabHandles.Elements:Button({
    Title = "Test All Features",
    Icon = "test-tube",
    Callback = function()
        WindUI:Notify({
            Title = "Feature Test",
            Content = "Testing all automation features...",
            Duration = 3
        })
        
        -- Test each feature
        if AutoFarm.settings.enabled then
            AutoFarm:autoAttack()
            if AutoFarm.settings.autoMobsDoors then
                AutoFarm:handleMobsDoors()
            end
            if AutoFarm.settings.autoSkills then
                AutoFarm:useSkills()
            end
            if AutoFarm.settings.collectCoins then
                AutoFarm:collectCoins()
            end
            if AutoFarm.settings.autoEscape then
                AutoFarm:checkEscape()
            end
        end
    end
})

-- Remove the old elements to avoid duplication
local themes = {}
for themeName, _ in pairs(WindUI:GetThemes()) do
    table.insert(themes, themeName)
end
table.sort(themes)

local themeDropdown = TabHandles.Appearance:Dropdown({
    Title = "loc:THEME_SELECT",
    Values = themes,
    Value = "Dark",
    Callback = function(theme)
        WindUI:SetTheme(theme)
        WindUI:Notify({
            Title = "Theme Applied",
            Content = theme,
            Icon = "palette",
            Duration = 2
        })
    end
})

local transparencySlider = TabHandles.Appearance:Slider({
    Title = "loc:TRANSPARENCY",
    Value = { 
        Min = 0,
        Max = 1,
        Default = 0.2,
    },
    Step = 0.1,
    Callback = function(value)
        Window:ToggleTransparency(tonumber(value) > 0)
        WindUI.TransparencyValue = tonumber(value)
    end
})

local canchangetheme = true

local ThemeToggle = TabHandles.Appearance:Toggle({
    Title = "Enable Dark Mode",
    Desc = "Use dark color scheme",
    Value = true,
    Callback = function(state)
        if canchangetheme then
            WindUI:SetTheme(state and "Dark" or "Light")
        end
        themeDropdown:Select(state and "Dark" or "Light")
    end
})

WindUI:OnThemeChange(function(theme)
    canchangetheme = false
    ThemeToggle:Set(theme == "Dark")
    canchangetheme = true
end)

TabHandles.Config:Paragraph({
    Title = "Configuration Manager",
    Desc = "Save and load your settings",
    Image = "save",
    ImageSize = 20,
    Color = "White"
})

local configName = "autofarm_config"
local configFile = nil
local MyPlayerData = {
    name = displayName,
    username = userName,
    level = 1,
    inventory = { "sword", "shield", "potion" }
}

TabHandles.Config:Input({
    Title = "Config Name",
    Value = configName,
    Callback = function(value)
        configName = value or "autofarm_config"
    end
})

local ConfigManager = Window.ConfigManager
if ConfigManager then
    ConfigManager:Init(Window)
    
    TabHandles.Config:Button({
        Title = "loc:SAVE_CONFIG",
        Icon = "save",
        Variant = "Primary",
        Callback = function()
            configFile = ConfigManager:CreateConfig(configName)
            
            -- Register all farm settings
            configFile:Register("mainToggle", mainToggle)
            configFile:Register("distanceSlider", distanceSlider)
            configFile:Register("autoAttackToggle", autoAttackToggle)
            configFile:Register("autoMobsDoorsToggle", autoMobsDoorsToggle)
            configFile:Register("autoSkillToggle", autoSkillToggle)
            configFile:Register("collectCoinsToggle", collectCoinsToggle)
            configFile:Register("autoEscapeToggle", autoEscapeToggle)
            
            configFile:Set("playerData", MyPlayerData)
            configFile:Set("lastSave", os.date("%Y-%m-%d %H:%M:%S"))
            
            if configFile:Save() then
                WindUI:Notify({ 
                    Title = "loc:SAVE_CONFIG", 
                    Content = "Saved as: "..configName,
                    Icon = "check",
                    Duration = 3
                })
            else
                WindUI:Notify({ 
                    Title = "Error", 
                    Content = "Failed to save config",
                    Icon = "x",
                    Duration = 3
                })
            end
        end
    })

    TabHandles.Config:Button({
        Title = "loc:LOAD_CONFIG",
        Icon = "folder",
        Callback = function()
            configFile = ConfigManager:CreateConfig(configName)
            local loadedData = configFile:Load()
            
            if loadedData then
                if loadedData.playerData then
                    MyPlayerData = loadedData.playerData
                end
                
                local lastSave = loadedData.lastSave or "Unknown"
                WindUI:Notify({ 
                    Title = "loc:LOAD_CONFIG", 
                    Content = "Loaded: "..configName.."\nLast save: "..lastSave,
                    Icon = "refresh-cw",
                    Duration = 5
                })
            else
                WindUI:Notify({ 
                    Title = "Error", 
                    Content = "Failed to load config",
                    Icon = "x",
                    Duration = 3
                })
            end
        end
    })
else
    TabHandles.Config:Paragraph({
        Title = "Config Manager Not Available",
        Desc = "This feature requires ConfigManager",
        Image = "alert-triangle",
        ImageSize = 20,
        Color = "White"
    })
end

-- Instructions for game-specific implementation
TabHandles.Config:Paragraph({
    Title = "Implementation Required",
    Desc = "You need to implement game-specific functions in the AutoFarm table methods",
    Image = "alert-circle",
    ImageSize = 20,
    Color = "Yellow"
})

Window:OnClose(function()
    print("Window closed for user: " .. userName)
    AutoFarm:stop()
    
    if ConfigManager and configFile then
        configFile:Set("playerData", MyPlayerData)
        configFile:Set("lastSave", os.date("%Y-%m-%d %H:%M:%S"))
        configFile:Save()
        print("Config auto-saved on close")
    end
end)

Window:OnDestroy(function()
    print("Window destroyed for user: " .. userName)
    AutoFarm:stop()
end)

-- Initial notification
WindUI:Notify({
    Title = "Auto Farm Loaded",
    Content = "Features are ready! Enable them from the Auto Farm tab",
    Duration = 5
})
