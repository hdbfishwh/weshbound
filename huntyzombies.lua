-- Generated by AI. 

local WindUI = loadstring(game:HttpGet("https://raw.githubusercontent.com/hdbfishwh/weshbound/refs/heads/main/theme.lua"))()

-- Get the player's name properly
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local displayName = LocalPlayer.DisplayName
local userName = LocalPlayer.Name

WindUI:Localization({
    Enabled = true,
    Prefix = "loc:",
    DefaultLanguage = "en",
    Translations = {
        ["en"] = {
            ["WINDUI_EXAMPLE"] = "Synthorix",
            ["WELCOME"] = "Weshbound Farm",
            ["LIB_DESC"] = "Hello " .. displayName .. " (@" .. userName .. "), thank you for using our script :)",
            ["SETTINGS"] = "Settings",
            ["APPEARANCE"] = "Appearance",
            ["FEATURES"] = "Features",
            ["UTILITIES"] = "Utilities",
            ["UI_ELEMENTS"] = "UI Elements",
            ["CONFIGURATION"] = "Configuration",
            ["SAVE_CONFIG"] = "Save Configuration",
            ["LOAD_CONFIG"] = "Load Configuration",
            ["THEME_SELECT"] = "Select Theme",
            ["TRANSPARENCY"] = "Window Transparency",
            ["AIMBOT"] = "Aimbot",
            ["AIMBOT_DESC"] = "NPC Head Detection System",
            ["ENABLE_AIMBOT"] = "Enable Aimbot",
            ["CIRCLE_RADIUS"] = "Circle Radius",
            ["CIRCLE_COLOR"] = "Circle Color",
            ["CIRCLE_THICKNESS"] = "Circle Thickness",
            ["TEST_AIMBOT"] = "Test Aimbot",
            ["AIMBOT_SETTINGS"] = "Aimbot Settings"
        }
    }
})

WindUI.TransparencyValue = 0.2
WindUI:SetTheme("Dark")

local function gradient(text, startColor, endColor)
    local result = ""
    for i = 1, #text do
        local t = (i - 1) / (#text - 1)
        local r = math.floor((startColor.R + (endColor.R - startColor.R) * t) * 255)
        local g = math.floor((startColor.G + (endColor.G - startColor.G) * t) * 255)
        local b = math.floor((startColor.B + (endColor.B - startColor.B) * t) * 255)
        result = result .. string.format('<font color="rgb(%d,%d,%d)">%s</font>', r, g, b, text:sub(i, i))
    end
    return result
end

WindUI:Popup({
    Title = gradient("Dev by Synthorix", Color3.fromHex("#6A11CB"), Color3.fromHex("#2575FC")),
    Icon = "sparkles",
    Content = "loc:LIB_DESC",
    Buttons = {
        {
            Title = "Get Started",
            Icon = "arrow-right",
            Variant = "Primary",
            Callback = function() end
        }
    }
})

local Window = WindUI:CreateWindow({
    Title = "loc:WINDUI_EXAMPLE",
    Icon = "rbxassetid://7724950285",
    Author = "loc:WELCOME",
    Folder = "WindUI_Example",
    Size = UDim2.fromOffset(450, 400), -- Smaller size: 450x400 instead of 580x490
    Theme = "Dark",
    User = {
        Enabled = true,
        Anonymous = false,
        Name = displayName,
        Username = userName,
        Callback = function()
            WindUI:Notify({
                Title = "User Profile",
                Content = "User: " .. displayName .. " (@" .. userName .. ")",
                Duration = 3
            })
        end
    },
    SideBarWidth = 160, -- Reduced sidebar width
})

Window:CreateTopbarButton("theme-switcher", "moon", function()
    WindUI:SetTheme(WindUI:GetCurrentTheme() == "Dark" and "Light" or "Dark")
    WindUI:Notify({
        Title = "Theme Changed",
        Content = "Current theme: "..WindUI:GetCurrentTheme(),
        Duration = 2
    })
end, 990)

local Tabs = {
    Main = Window:Section({ Title = "loc:FEATURES", Opened = true }),
    Settings = Window:Section({ Title = "loc:SETTINGS", Opened = true }),
    Utilities = Window:Section({ Title = "loc:UTILITIES", Opened = true }),
    Aimbot = Window:Section({ Title = "loc:AIMBOT", Opened = true })
}

local TabHandles = {
    Elements = Tabs.Main:Tab({ Title = "loc:UI_ELEMENTS", Icon = "layout-grid", Desc = "UI Elements Example" }),
    Appearance = Tabs.Settings:Tab({ Title = "loc:APPEARANCE", Icon = "brush" }),
    Config = Tabs.Utilities:Tab({ Title = "loc:CONFIGURATION", Icon = "settings" }),
    AimbotTab = Tabs.Aimbot:Tab({ Title = "loc:AIMBOT_SETTINGS", Icon = "target", Desc = "loc:AIMBOT_DESC" })
}

-- Aimbot functionality
local aimbotEnabled = false
local circleRadius = 50
local circleColor = Color3.fromRGB(255, 0, 0)
local circleTransparency = 0.5
local circleThickness = 2

-- Drawing objects
local circle = nil
local connection = nil

-- Function to find the closest NPC head
local function findClosestNPC()
    local closestHead = nil
    local closestDistance = math.huge
    local localPlayer = game:GetService("Players").LocalPlayer
    local camera = workspace.CurrentCamera
    
    if not localPlayer.Character or not localPlayer.Character:FindFirstChild("Head") then
        return nil
    end
    
    local localHead = localPlayer.Character.Head
    local monsters = workspace:FindFirstChild("Monster")
    
    if not monsters then
        return nil
    end
    
    for _, monster in pairs(monsters:GetChildren()) do
        if monster:FindFirstChild("Head") and monster:IsA("Model") then
            local head = monster.Head
            local distance = (localHead.Position - head.Position).Magnitude
            
            if distance < closestDistance then
                closestDistance = distance
                closestHead = head
            end
        end
    end
    
    return closestHead
end

-- Function to draw circle around head
local function drawCircle(head)
    if not head then
        if circle then
            circle:Remove()
            circle = nil
        end
        return
    end
    
    if not circle then
        circle = Drawing.new("Circle")
        circle.Color = circleColor
        circle.Transparency = circleTransparency
        circle.Thickness = circleThickness
        circle.Filled = false
    end
    
    local camera = workspace.CurrentCamera
    local headPos, onScreen = camera:WorldToViewportPoint(head.Position)
    
    if onScreen then
        circle.Visible = true
        circle.Position = Vector2.new(headPos.X, headPos.Y)
        circle.Radius = circleRadius
    else
        circle.Visible = false
    end
end

-- Function to toggle aimbot
local function toggleAimbot(state)
    aimbotEnabled = state
    
    if aimbotEnabled then
        if connection then
            connection:Disconnect()
        end
        
        connection = game:GetService("RunService").RenderStepped:Connect(function()
            if aimbotEnabled then
                local closestHead = findClosestNPC()
                drawCircle(closestHead)
            else
                if circle then
                    circle:Remove()
                    circle = nil
                end
            end
        end)
        
        WindUI:Notify({
            Title = "Aimbot",
            Content = "Aimbot enabled",
            Icon = "target",
            Duration = 2
        })
    else
        if connection then
            connection:Disconnect()
            connection = nil
        end
        
        if circle then
            circle:Remove()
            circle = nil
        end
        
        WindUI:Notify({
            Title = "Aimbot",
            Content = "Aimbot disabled",
            Icon = "x",
            Duration = 2
        })
    end
end

-- Add aimbot controls to the UI
TabHandles.AimbotTab:Toggle({
    Title = "loc:ENABLE_AIMBOT",
    Desc = "Detects NPC heads in Monster folder",
    Value = false,
    Callback = toggleAimbot
})

TabHandles.AimbotTab:Slider({
    Title = "loc:CIRCLE_RADIUS",
    Desc = "Adjust the circle size around NPC heads",
    Value = { Min = 10, Max = 200, Default = circleRadius },
    Callback = function(value)
        circleRadius = value
    end
})

TabHandles.AimbotTab:Colorpicker({
    Title = "loc:CIRCLE_COLOR",
    Default = circleColor,
    Transparency = circleTransparency,
    Callback = function(color, transparency)
        circleColor = color
        circleTransparency = transparency
        if circle then
            circle.Color = color
            circle.Transparency = transparency
        end
    end
})

TabHandles.AimbotTab:Slider({
    Title = "loc:CIRCLE_THICKNESS",
    Desc = "Adjust the circle line thickness",
    Value = { Min = 1, Max = 10, Default = circleThickness },
    Callback = function(value)
        circleThickness = value
        if circle then
            circle.Thickness = value
        end
    end
})

TabHandles.AimbotTab:Button({
    Title = "loc:TEST_AIMBOT",
    Icon = "eye",
    Callback = function()
        local closestHead = findClosestNPC()
        if closestHead then
            WindUI:Notify({
                Title = "Aimbot Test",
                Content = "Found NPC head: " .. closestHead.Parent.Name,
                Icon = "check",
                Duration = 3
            })
        else
            WindUI:Notify({
                Title = "Aimbot Test",
                Content = "No NPC heads found in Monster folder",
                Icon = "x",
                Duration = 3
            })
        end
    end
})

-- Remove the paragraph to make it more compact
TabHandles.Elements:Divider()

local toggleState = false
local featureToggle = TabHandles.Elements:Toggle({
    Title = "Enable Advanced Features",
    Desc = "Unlocks additional functionality",
    Value = false,
    Callback = function(state) 
        toggleState = state
        WindUI:Notify({
            Title = "Features",
            Content = state and "Features Enabled" or "Features Disabled",
            Icon = state and "check" or "x",
            Duration = 2
        })
    end
})

local intensitySlider = TabHandles.Elements:Slider({
    Title = "Effect Intensity",
    Desc = "Adjust the effect strength",
    Value = { Min = 0, Max = 100, Default = 50 },
    Callback = function(value)
        print("Intensity set to:", value)
    end
})

local modeDropdown = TabHandles.Elements:Dropdown({
    Title = "Select Mode",
    Values = { "Standard", "Advanced", "Expert" },
    Value = "Standard",
    Callback = function(option)
        WindUI:Notify({
            Title = "Mode Changed",
            Content = "Selected: "..option,
            Duration = 2
        })
    end
})

TabHandles.Elements:Divider()

TabHandles.Elements:Button({
    Title = "Show Notification",
    Icon = "bell",
    Callback = function()
        WindUI:Notify({
            Title = "Hello " .. displayName .. "!",
            Content = "This is a personalized notification for @" .. userName,
            Icon = "bell",
            Duration = 3
        })
    end
})

TabHandles.Elements:Colorpicker({
    Title = "Select Color",
    Default = Color3.fromHex("#30ff6a"),
    Transparency = 0,
    Callback = function(color, transparency)
        WindUI:Notify({
            Title = "Color Changed",
            Content = "New color: "..color:ToHex().."\nTransparency: "..transparency,
            Duration = 2
        })
    end
})

-- Remove the paragraph to make it more compact
local themes = {}
for themeName, _ in pairs(WindUI:GetThemes()) do
    table.insert(themes, themeName)
end
table.sort(themes)

local themeDropdown = TabHandles.Appearance:Dropdown({
    Title = "loc:THEME_SELECT",
    Values = themes,
    Value = "Dark",
    Callback = function(theme)
        WindUI:SetTheme(theme)
        WindUI:Notify({
            Title = "Theme Applied",
            Content = theme,
            Icon = "palette",
            Duration = 2
        })
    end
})

local transparencySlider = TabHandles.Appearance:Slider({
    Title = "loc:TRANSPARENCY",
    Value = { 
        Min = 0,
        Max = 1,
        Default = 0.2,
    },
    Step = 0.1,
    Callback = function(value)
        Window:ToggleTransparency(tonumber(value) > 0)
        WindUI.TransparencyValue = tonumber(value)
    end
})

local canchangetheme = true

local ThemeToggle = TabHandles.Appearance:Toggle({
    Title = "Enable Dark Mode",
    Desc = "Use dark color scheme",
    Value = true,
    Callback = function(state)
        if canchangetheme then
            WindUI:SetTheme(state and "Dark" or "Light")
        end
        themeDropdown:Select(state and "Dark" or "Light")
    end
})

WindUI:OnThemeChange(function(theme)
    canchangetheme = false
    ThemeToggle:Set(theme == "Dark")
    canchangetheme = true
end)

TabHandles.Appearance:Button({
    Title = "Create New Theme",
    Icon = "plus",
    Callback = function()
        Window:Dialog({
            Title = "Create Theme",
            Content = "This feature is coming soon!",
            Buttons = {
                {
                    Title = "OK",
                    Variant = "Primary"
                }
            }
        })
    end
})

TabHandles.Config:Paragraph({
    Title = "Configuration Manager",
    Desc = "Save and load your settings",
    Image = "save",
    ImageSize = 20,
    Color = "White"
})

local configName = "default"
local configFile = nil
local MyPlayerData = {
    name = displayName,
    username = userName,
    level = 1,
    inventory = { "sword", "shield", "potion" }
}

TabHandles.Config:Input({
    Title = "Config Name",
    Value = configName,
    Callback = function(value)
        configName = value or "default"
    end
})

local ConfigManager = Window.ConfigManager
if ConfigManager then
    ConfigManager:Init(Window)
    
    TabHandles.Config:Button({
        Title = "loc:SAVE_CONFIG",
        Icon = "save",
        Variant = "Primary",
        Callback = function()
            configFile = ConfigManager:CreateConfig(configName)
            
            configFile:Register("featureToggle", featureToggle)
            configFile:Register("intensitySlider", intensitySlider)
            configFile:Register("modeDropdown", modeDropdown)
            configFile:Register("themeDropdown", themeDropdown)
            configFile:Register("transparencySlider", transparencySlider)
            
            configFile:Set("playerData", MyPlayerData)
            configFile:Set("lastSave", os.date("%Y-%m-%d %H:%M:%S"))
            
            if configFile:Save() then
                WindUI:Notify({ 
                    Title = "loc:SAVE_CONFIG", 
                    Content = "Saved as: "..configName,
                    Icon = "check",
                    Duration = 3
                })
            else
                WindUI:Notify({ 
                    Title = "Error", 
                    Content = "Failed to save config",
                    Icon = "x",
                    Duration = 3
                })
            end
        end
    })

    TabHandles.Config:Button({
        Title = "loc:LOAD_CONFIG",
        Icon = "folder",
        Callback = function()
            configFile = ConfigManager:CreateConfig(configName)
            local loadedData = configFile:Load()
            
            if loadedData then
                if loadedData.playerData then
                    MyPlayerData = loadedData.playerData
                end
                
                local lastSave = loadedData.lastSave or "Unknown"
                WindUI:Notify({ 
                    Title = "loc:LOAD_CONFIG", 
                    Content = "Loaded: "..configName.."\nLast save: "..lastSave,
                    Icon = "refresh-cw",
                    Duration = 5
                })
                
                TabHandles.Config:Paragraph({
                    Title = "Player Data",
                    Desc = string.format("Name: %s (@%s)\nLevel: %d\nInventory: %s", 
                        MyPlayerData.name, 
                        MyPlayerData.username, 
                        MyPlayerData.level, 
                        table.concat(MyPlayerData.inventory, ", "))
                })
            else
                WindUI:Notify({ 
                    Title = "Error", 
                    Content = "Failed to load config",
                    Icon = "x",
                    Duration = 3
                })
            end
        end
    })
else
    TabHandles.Config:Paragraph({
        Title = "Config Manager Not Available",
        Desc = "This feature requires ConfigManager",
        Image = "alert-triangle",
        ImageSize = 20,
        Color = "White"
    })
end

-- Remove footer section to make it more compact
TabHandles.Config:Paragraph({
    Title = "Created with ❤️",
    Desc = "github.com/Footagesus/WindUI",
    Image = "github",
    ImageSize = 20,
    Color = "Grey",
    Buttons = {
        {
            Title = "Copy Link",
            Icon = "copy",
            Variant = "Tertiary",
            Callback = function()
                setclipboard("https://github.com/Footagesus/WindUI")
                WindUI:Notify({
                    Title = "Copied!",
                    Content = "GitHub link copied to clipboard",
                    Duration = 2
                })
            end
        }
    }
})

-- Clean up when window is closed
Window:OnClose(function()
    print("Window closed for user: " .. userName)
    
    if ConfigManager and configFile then
        configFile:Set("playerData", MyPlayerData)
        configFile:Set("lastSave", os.date("%Y-%m-%d %H:%M:%S"))
        configFile:Save()
        print("Config auto-saved on close")
    end
    
    -- Clean up aimbot resources
    if connection then
        connection:Disconnect()
    end
    
    if circle then
        circle:Remove()
    end
end)

Window:OnDestroy(function()
    print("Window destroyed for user: " .. userName)
    
    -- Clean up aimbot resources
    if connection then
        connection:Disconnect()
    end
    
    if circle then
        circle:Remove()
    end
end)
